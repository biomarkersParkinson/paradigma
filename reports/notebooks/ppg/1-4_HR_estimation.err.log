Traceback (most recent call last):
  File "/home/runner/.cache/pypoetry/virtualenvs/paradigma-1HID61PK-py3.10/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/.cache/pypoetry/virtualenvs/paradigma-1HID61PK-py3.10/lib/python3.10/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/runner/.cache/pypoetry/virtualenvs/paradigma-1HID61PK-py3.10/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/runner/.cache/pypoetry/virtualenvs/paradigma-1HID61PK-py3.10/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/.cache/pypoetry/virtualenvs/paradigma-1HID61PK-py3.10/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/.cache/pypoetry/virtualenvs/paradigma-1HID61PK-py3.10/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Main Loop over all synchronized segments
for n in range(n_segments_sync):
    ppg_indices = data_sync_np[n, :2]
    ppg_segment = data_sync_np[n, 2]

    class_start = start_end_indices[n, 0]
    class_end = start_end_indices[n, 1]

    meta_path_ppg = meta_ppg[ppg_segment]['tsdf_meta_fullpath']
    # TODO: Fix loading tsdf
    metadata_list_ppg, data_list_ppg = tsdf.load_tsdf_metadata_from_path(meta_path_ppg)

    time_idx_ppg = tsdf.get_index(metadata_list_ppg, 'time')
    values_idx_ppg = tsdf.get_index(metadata_list_ppg, 'samples')

    t_iso_ppg = metadata_list_ppg[time_idx_ppg]['start_iso8601']
    datetime_ppg = parse_iso8601_to_datetime(t_iso_ppg).replace(tzinfo=datetime.timezone.utc)
    ts_ppg = datetime_ppg.timestamp() * UNIX_TICKS_MS

    t_ppg = np.cumsum(data_list_ppg[time_idx_ppg]) + ts_ppg
    tr_ppg = (t_ppg - ts_ppg) / UNIX_TICKS_MS

    v_ppg = data_list_ppg[values_idx_ppg]

    v_ppg = v_ppg[ppg_indices[0]:ppg_indices[1]]
    tr_ppg = tr_ppg[ppg_indices[0]:ppg_indices[1]]

    ts_sync = ts_ppg + tr_ppg[0] * UNIX_TICKS_MS
    tr_ppg -= tr_ppg[0]

    fs_ppg_est = 1 / np.median(np.diff(tr_ppg))

    if len(v_ppg) < FS_PPG * MIN_WINDOW_LENGTH:
        print('Sample is of insufficient length!')
        continue

    # Placeholder functions
    v_ppg_pre, tr_ppg_pre = preprocessing_ppg(tr_ppg, v_ppg, FS_PPG)
    
    class_ppg_segment = ppg_post_prob_np[class_start:class_end]
    class_acc_segment = imu_label_np[class_start:class_end]

    # Assign window-level probabilities to individual samples
    data_prob_sample = sample_prob_final(class_ppg_segment, class_acc_segment, FS_PPG)

    sqa_label = np.zeros(len(data_prob_sample))
    sqa_label[data_prob_sample > THRESHOLD_SQA] = 1

    v_start_idx, v_end_idx = extract_hr_segments(sqa_label, MIN_HR_SAMPLES)

    for i in range(len(v_start_idx)):
        if v_start_idx[i] < 2 * FS_PPG or v_end_idx[i] > len(v_ppg_pre) - 2 * FS_PPG:
            continue
        
        rel_ppg = v_ppg_pre[v_start_idx[i]:v_end_idx[i]]
        rel_time = tr_ppg_pre[v_start_idx[i]:v_end_idx[i]]

        rel_ppg_spwvd = v_ppg_pre[v_start_idx[i] - FS_PPG*2:v_end_idx[i] + FS_PPG*2]
        hr_est = PPG_TFD_HR(rel_ppg_spwvd, TFD_LENGTH, MA, FS_PPG, KERN_TYPE, KERN_PARAMS)

        if len(rel_ppg) % 60 != 0:
            hr_time = rel_time[0:len(rel_ppg) - FS_PPG:HR_EST_SAMPLES]
        else:
            hr_time = rel_time[0:len(rel_ppg):HR_EST_SAMPLES]

        t_epoch_unix = hr_time * UNIX_TICKS_MS + ts_sync
        v_hr_ppg.append(hr_est)
        t_hr_unix.append(t_epoch_unix)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mIndexError[0m                                Traceback (most recent call last)
Cell [0;32mIn[5], line 9[0m
[1;32m      6[0m class_start [38;5;241m=[39m start_end_indices[n, [38;5;241m0[39m]
[1;32m      7[0m class_end [38;5;241m=[39m start_end_indices[n, [38;5;241m1[39m]
[0;32m----> 9[0m meta_path_ppg [38;5;241m=[39m [43mmeta_ppg[49m[43m[[49m[43mppg_segment[49m[43m][49m[[38;5;124m'[39m[38;5;124mtsdf_meta_fullpath[39m[38;5;124m'[39m]
[1;32m     10[0m [38;5;66;03m# TODO: Fix loading tsdf[39;00m
[1;32m     11[0m metadata_list_ppg, data_list_ppg [38;5;241m=[39m tsdf[38;5;241m.[39mload_tsdf_metadata_from_path(meta_path_ppg)

[0;31mIndexError[0m: list index out of range

