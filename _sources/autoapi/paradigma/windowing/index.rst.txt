paradigma.windowing
===================

.. py:module:: paradigma.windowing


Functions
---------

.. autoapisummary::

   paradigma.windowing.create_window
   paradigma.windowing.tabulate_windows
   paradigma.windowing.create_segments
   paradigma.windowing.discard_segments


Module Contents
---------------

.. py:function:: create_window(df: pandas.DataFrame, time_column_name: str, window_nr: int, lower_index: int, upper_index: int, data_point_level_cols: list, segment_nr: int, sampling_frequency: int = 100) -> list

   Transforms (a subset of) a dataframe into a single row

   :param df: The original dataframe to be windowed
   :type df: pd.DataFrame
   :param time_column_name: The name of the time column
   :type time_column_name: str
   :param window_nr: The identification of the window
   :type window_nr: int
   :param lower_index: The dataframe index of the first sample to be windowed
   :type lower_index: int
   :param upper_index: The dataframe index of the final sample to be windowed
   :type upper_index: int
   :param data_point_level_cols: The columns in sensor_df that are to be kept as individual datapoints in a list instead of aggregates
   :type data_point_level_cols: list
   :param segment_nr: The identification of the segment
   :type segment_nr: int
   :param sampling_frequency: The sampling frequency (Hz) of the data (default: 100)
   :type sampling_frequency: int, optional

   :returns: Rows corresponding to single windows
   :rtype: list


.. py:function:: tabulate_windows(df: pandas.DataFrame, time_column_name: str, data_point_level_cols: list, window_length_s: Union[int, float] = 6, window_step_size_s: Union[int, float] = 1, sampling_frequency: int = 100, segment_nr_colname: Union[str, None] = None, segment_nr: Union[int, None] = None) -> pandas.DataFrame

   Compiles multiple windows into a single dataframe

   :param df: The original dataframe to be windowed
   :type df: pd.DataFrame
   :param time_column_name: The name of the time column
   :type time_column_name: str
   :param data_point_level_cols: The names of the columns that are to be kept as individual datapoints in a list instead of aggregates
   :type data_point_level_cols: list
   :param window_length_s: The number of seconds a window constitutes (default: 6)
   :type window_length_s: int | float, optional
   :param window_step_size_s: The number of seconds between the end of the previous and the start of the next window (default: 1)
   :type window_step_size_s: int | float, optional
   :param sampling_frequency: The sampling frequency of the data (default: 100)
   :type sampling_frequency: int, optional
   :param segment_nr_colname: The name of the column that identifies the segment; set to None if not applicable (default: None)
   :type segment_nr_colname: str, optional
   :param segment_nr: The identification of the segment; set to None if not applicable (default: None)
   :type segment_nr: int, optional

   :returns: Dataframe with each row corresponding to an individual window
   :rtype: pd.DataFrame


.. py:function:: create_segments(df: pandas.DataFrame, time_colname: str, segment_nr_colname: str, minimum_gap_s: int) -> pandas.DataFrame

   Create segments based on the time column of the dataframe. Segments are defined as continuous time periods.

   :param df: The dataframe to be segmented
   :type df: pd.DataFrame
   :param time_colname: The name of the time column
   :type time_colname: str
   :param minimum_gap_s: The minimum gap in seconds to split up the time periods into segments
   :type minimum_gap_s: int

   :returns: The dataframe with additional columns related to segments
   :rtype: pd.DataFrame


.. py:function:: discard_segments(df: pandas.DataFrame, time_colname: str, segment_nr_colname: str, minimum_segment_length_s: int) -> pandas.DataFrame

   Discard segments that are shorter than a specified length.

   :param df: The dataframe containing information about the segments
   :type df: pd.DataFrame
   :param time_colname: The column name of the time column
   :type time_colname: str
   :param segment_nr_colname: The column name of the column containing the segment numbers
   :type segment_nr_colname: str
   :param minimum_segment_length_s: The minimum required length of a segment in seconds
   :type minimum_segment_length_s: int

   :returns: The dataframe with segments that are longer than the specified length
   :rtype: pd.DataFrame


