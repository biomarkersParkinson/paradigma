paradigma.heart_rate_analysis
=============================

.. py:module:: paradigma.heart_rate_analysis


Attributes
----------

.. autoapisummary::

   paradigma.heart_rate_analysis.UNIX_TICKS_MS


Classes
-------

.. autoapisummary::

   paradigma.heart_rate_analysis.HeartRateFeatureExtractionConfig
   paradigma.heart_rate_analysis.DataColumns


Functions
---------

.. autoapisummary::

   paradigma.heart_rate_analysis.extract_ppg_features
   paradigma.heart_rate_analysis.calculate_power_ratio
   paradigma.heart_rate_analysis.read_PPG_quality_classifier
   paradigma.heart_rate_analysis.read_metadata
   paradigma.heart_rate_analysis.write_data
   paradigma.heart_rate_analysis.get_end_iso8601
   paradigma.heart_rate_analysis.extract_signal_quality_features


Module Contents
---------------

.. py:class:: HeartRateFeatureExtractionConfig

.. py:function:: extract_ppg_features(arr_ppg: numpy.ndarray, sampling_frequency: int) -> numpy.ndarray

.. py:function:: calculate_power_ratio(f1: numpy.ndarray, PSD_acc: numpy.ndarray, f2: numpy.ndarray, PSD_ppg: numpy.ndarray) -> float

   Calculates the power ratio of the accelerometer signal in the PPG frequency range.

   Args:
   f1 (numpy.ndarray): Frequency bins for the accelerometer signal.
   PSD_acc (numpy.ndarray): Power Spectral Density of the accelerometer signal.
   f2 (numpy.ndarray): Frequency bins for the PPG signal.
   PSD_ppg (numpy.ndarray): Power Spectral Density of the PPG signal.

   Returns:
   float: The power ratio of the accelerometer signal in the PPG frequency range.


.. py:function:: read_PPG_quality_classifier(classifier_path: str)

   Read the PPG quality classifier from a file.

   :param classifier_path: The path to the classifier file.
   :type classifier_path: str

   :returns: The classifier dictionary.
   :rtype: dict


.. py:function:: read_metadata(input_path: str, meta_filename: str, time_filename: str, values_filename: str) -> Tuple[tsdf.TSDFMetadata, tsdf.TSDFMetadata]

.. py:function:: write_data(metadata_time: tsdf.TSDFMetadata, metadata_samples: tsdf.TSDFMetadata, output_path: str, output_filename: str, df: pandas.DataFrame)

.. py:function:: get_end_iso8601(start_iso8601, window_length_seconds)

.. py:class:: DataColumns

   Enum for the data channels in tsdf.


   .. py:attribute:: ACCELEROMETER_X
      :value: 'accelerometer_x'



   .. py:attribute:: ACCELEROMETER_Y
      :value: 'accelerometer_y'



   .. py:attribute:: ACCELEROMETER_Z
      :value: 'accelerometer_z'



   .. py:attribute:: GYROSCOPE_X
      :value: 'gyroscope_x'



   .. py:attribute:: GYROSCOPE_Y
      :value: 'gyroscope_y'



   .. py:attribute:: GYROSCOPE_Z
      :value: 'gyroscope_z'



   .. py:attribute:: PPG
      :value: 'green'



   .. py:attribute:: TIME
      :value: 'time'



.. py:data:: UNIX_TICKS_MS
   :type:  int
   :value: 1000


.. py:function:: extract_signal_quality_features(input_path: str, classifier_path: str, output_path: str, config: paradigma.heart_rate_analysis_config.HeartRateFeatureExtractionConfig) -> None

